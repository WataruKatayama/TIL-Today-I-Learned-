//変数　←　値を入れる箱　
//ルール　型　変数名　＝　値

jshell> int i = 123
i ==> 123

//型の学習
//変数に入れる値によってある程度型のルールがある
//例：数値はint 文字はString

jshell> int a = "3"
|  エラー:
|  不適合な型: java.lang.Stringをintに変換できません:
|  int a = "3";
|          ^-^

//上記のようにintに文字列を入れようとするとエラーが返ってくる
//「型が違いますよ。intには数値しか入りませんよ。"は文字ですよ。」というエラー

//上記の正しいコード
jshell> String a = "3"
a ==> "3"

//型の変換
//途中で型を変換したい場合は型の変換(キャスト)を行う
//ルール　型　変数　= (変換後の型)値

//例　実数型(Double)をやっぱり数値型に直したい
jshell> int i = 123
i ==> 123

jshell> double d = i　
d ==> 123.0

jshell> int j = d
|  エラー:
|  不適合な型: 精度が失われる可能性があるdoubleからintへの変換
|  int j = d;
|          ^

jshell> int j = (int)d
j ==> 123


//フォーマット出力

//複数の文字列を連結して出力する時、文字が多いとミスが発生する
//例　演算子で「2+3=5」と出力させたいのに、結果「23」となってしまう
jshell> 2+"+"+3+"="+2+3
$7 ==> "2+3=23"

//上記の結果にならない為にはわかりやすく構成する必要があり、formattedメソッドを使用する。
//"%d演算子...".formatted(入れたい値) 　　※整数はd 文字はsを使用する

jshell> "%d+%d=%d".formatted(2,3,2+3)
$8 ==> "2+3=5"

